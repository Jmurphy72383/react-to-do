{"version":3,"sources":["components/Todo.js","components/NewToDo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","showEdit","task","props","handleDelete","deleteTodo","id","handleEdit","setState","handleChange","e","defineProperty","target","name","value","submitEdit","preventDefault","updateTodo","handleToggle","toggleTodo","inherits","createClass","key","react_default","a","createElement","className","onSubmit","type","onChange","completed","onClick","Component","NewToDo","handleSubmit","createTodo","objectSpread","uuid","htmlFor","placeholder","TodoList","todos","createTodoHandler","newTodo","toConsumableArray","removeTodoHandler","filter","todo","updatedTodo","updatedItem","map","toggleCompletion","_this2","items","src_components_Todo","src_components_NewToDo","App","src_components_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gVAsEeA,SAnEf,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,GAAA,QAAAO,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAAJ,IAAAe,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MAEIQ,MAAQ,CACJC,UAAU,EACVC,KAAMjB,EAAKkB,MAAMD,MAJzBjB,EAOImB,aAAe,WACXnB,EAAKkB,MAAME,WAAWpB,EAAKkB,MAAMG,KARzCrB,EAWIsB,WAAa,WACTtB,EAAKuB,SAAS,CACVP,UAAWhB,EAAKe,MAAMC,YAblChB,EAiBIwB,aAAe,SAACC,GACZzB,EAAKuB,SAALtB,OAAAyB,EAAA,EAAAzB,CAAA,GACKwB,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,SAnBtC7B,EAuBI8B,WAAa,SAACL,GACVA,EAAEM,iBACF/B,EAAKkB,MAAMc,WAAWhC,EAAKkB,MAAMG,GAAIrB,EAAKe,MAAME,MAChDjB,EAAKuB,SAAS,CACVP,UAAU,KA3BtBhB,EA+BIiC,aAAe,SAACR,GACZzB,EAAKkB,MAAMgB,WAAWlC,EAAKkB,MAAMG,KAhCzCrB,EAAA,OAAAC,OAAAkC,EAAA,EAAAlC,CAAAJ,EAAAC,GAAAG,OAAAmC,EAAA,EAAAnC,CAAAJ,EAAA,EAAAwC,IAAA,SAAAR,MAAA,WA+DQ,OAxBG1B,KAAKY,MAAMC,SAENsB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,iBAAiBC,SAAUvC,KAAK2B,YAC5CQ,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOf,KAAK,OAAOC,MAAO1B,KAAKY,MAAME,KAAM2B,SAAUzC,KAAKqB,eACtEc,EAAAC,EAAAC,cAAA,wBAMRF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAEXH,EAAAC,EAAAC,cAAA,MAAIC,UAAWtC,KAAKe,MAAM2B,UAAY,sBAAwB,YAC1DC,QAAS3C,KAAK8B,cAEjB9B,KAAKe,MAAMD,MACZqB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,UAAQM,QAAS3C,KAAKmB,YAAYgB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAC/CH,EAAAC,EAAAC,cAAA,UAAQM,QAAS3C,KAAKgB,cAAcmB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uBA1DzE5C,EAAA,CAA0BkD,+BC+CXC,SA9Cf,SAAAlD,GAAA,SAAAkD,IAAA,IAAAjD,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6C,GAAA,QAAA5C,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAA+C,IAAApC,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MAOIQ,MAAQ,CACJE,KAAM,IARdjB,EAWIwB,aAAe,SAAAC,GACXzB,EAAKuB,SAALtB,OAAAyB,EAAA,EAAAzB,CAAA,GACKwB,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,SAbtC7B,EAiBIiD,aAAe,SAAAxB,GACXA,EAAEM,iBACF/B,EAAKkB,MAAMgC,WAAXjD,OAAAkD,EAAA,EAAAlD,CAAA,GAA0BD,EAAKe,MAA/B,CAAsCM,GAAI+B,MAAQP,WAAW,KAC7D7C,EAAKuB,SAAS,CACVN,KAAM,MArBlBjB,EAAA,OAAAC,OAAAkC,EAAA,EAAAlC,CAAA+C,EAAAlD,GAAAG,OAAAmC,EAAA,EAAAnC,CAAA+C,EAAA,EAAAX,IAAA,SAAAR,MAAA,WA0BQ,OAEQS,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAcC,SAAUvC,KAAK8C,cACzCX,EAAAC,EAAAC,cAAA,SAAOa,QAAQ,QAAf,YACAf,EAAAC,EAAAC,cAAA,SACIG,KAAK,OACLf,KAAK,OACL0B,YAAY,WACZjC,GAAG,OACHQ,MAAO1B,KAAKY,MAAME,KAClB2B,SAAUzC,KAAKqB,eAGnBc,EAAAC,EAAAC,cAAA,+BAvCpBQ,EAAA,CAA6BD,cCsEdQ,SArEf,SAAAzD,GAAA,SAAAyD,IAAA,IAAAxD,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoD,GAAA,QAAAnD,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAAsD,IAAA3C,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MAEIQ,MAAQ,CACJyC,MAAO,IAHfxD,EAMIyD,kBAAoB,SAAAC,GAChB1D,EAAKuB,SAAS,CACViC,MAAK,GAAA1C,OAAAb,OAAA0D,EAAA,EAAA1D,CAAMD,EAAKe,MAAMyC,OAAjB,CAAwBE,OARzC1D,EAYI4D,kBAAoB,SAAAvC,GAChBrB,EAAKuB,SAAS,CACViC,MAAOxD,EAAKe,MAAMyC,MAAMK,OAAO,SAAAC,GAAI,OAAIA,EAAKzC,KAAOA,OAd/DrB,EAkBIgC,WAAa,SAACX,EAAI0C,GACd,IAAMC,EAAchE,EAAKe,MAAMyC,MAAMS,IAAI,SAAAH,GACrC,OAAGA,EAAKzC,KAAOA,EACJpB,OAAAkD,EAAA,EAAAlD,CAAA,GAAK6D,EAAZ,CAAkB7C,KAAM8C,IAErBD,IAEX9D,EAAKuB,SAAS,CACViC,MAAOQ,KA1BnBhE,EA8BIkE,iBAAmB,SAAC7C,GAChB,IAAM2C,EAAchE,EAAKe,MAAMyC,MAAMS,IAAI,SAAAH,GACrC,OAAGA,EAAKzC,KAAOA,EACJpB,OAAAkD,EAAA,EAAAlD,CAAA,GAAK6D,EAAZ,CAAkBjB,WAAYiB,EAAKjB,YAEhCiB,IAEX9D,EAAKuB,SAAS,CACViC,MAAOQ,KAtCnBhE,EAAA,OAAAC,OAAAkC,EAAA,EAAAlC,CAAAsD,EAAAzD,GAAAG,OAAAmC,EAAA,EAAAnC,CAAAsD,EAAA,EAAAlB,IAAA,SAAAR,MAAA,WA2Ca,IAAAsC,EAAAhE,KACDiE,EAAQjE,KAAKY,MAAMyC,MAAMS,IAAI,SAAAH,GAAI,OACrCxB,EAAAC,EAAAC,cAAC6B,EAAD,CACIhC,IAAKyB,EAAKzC,GACVA,GAAIyC,EAAKzC,GACTJ,KAAM6C,EAAK7C,KACX4B,UAAWiB,EAAKjB,UAChBzB,WAAY+C,EAAKP,kBACjB5B,WAAYmC,EAAKnC,WACjBE,WAAYiC,EAAKD,qBAErB,OACI5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,uBAAcF,EAAAC,EAAAC,cAAA,iCAEdF,EAAAC,EAAAC,cAAA,UACK4B,GAGL9B,EAAAC,EAAAC,cAAC8B,EAAD,CAASpB,WAAY/C,KAAKsD,yBA9D1CF,EAAA,CAA8BR,oBCOfwB,MARf,WACE,OACEjC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b07a1232.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Todo.css';\r\n\r\nexport class Todo extends Component {\r\n\r\n    state = {\r\n        showEdit: false,\r\n        task: this.props.task\r\n    };\r\n\r\n    handleDelete = () => {\r\n        this.props.deleteTodo(this.props.id)\r\n    }\r\n\r\n    handleEdit = () => {\r\n        this.setState({\r\n            showEdit: !this.state.showEdit\r\n        });\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value \r\n        });\r\n    }\r\n\r\n    submitEdit = (e) => {\r\n        e.preventDefault();\r\n        this.props.updateTodo(this.props.id, this.state.task);\r\n        this.setState({\r\n            showEdit: false\r\n        });\r\n    }\r\n\r\n    handleToggle = (e) => {\r\n        this.props.toggleTodo(this.props.id);\r\n    }\r\n\r\n\r\n    render() {\r\n        //Shows edit input if the edit todo button is clicked. Else, shows the todo list item\r\n        let edit;\r\n        if(this.state.showEdit) {\r\n            edit = (\r\n                <div className=\"Todo\">\r\n                    <form className=\"Todo-edit-form\" onSubmit={this.submitEdit}>\r\n                        <input type=\"text\" name='task' value={this.state.task} onChange={this.handleChange}></input>\r\n                        <button>Save</button>\r\n                    </form>\r\n                </div>\r\n            )\r\n        } else {\r\n            edit = (\r\n                <div className=\"Todo\">\r\n                    \r\n                    <li className={this.props.completed ? 'Todo-task completed' : \"Todo-task\"}\r\n                        onClick={this.handleToggle}\r\n                    >\r\n                    {this.props.task}</li>\r\n                    <div className=\"Todo-buttons\">\r\n                        <button onClick={this.handleEdit}><i className=\"fas fa-pen\"/></button>\r\n                        <button onClick={this.handleDelete}><i className=\"fa fa-trash\"/></button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        return edit;\r\n    }\r\n}\r\n\r\nexport default Todo;\r\n","import React, { Component } from 'react';\r\nimport uuid from 'uuid/v4';\r\nimport './NewToDo.css';\r\n\r\nexport class NewToDo extends Component {\r\n    // constructor(props) {\r\n    //     super(props)\r\n    //     this.state = {\r\n    //         task: \"\"\r\n    //     }\r\n    // }\r\n    state = {\r\n        task: \"\"\r\n    };\r\n\r\n    handleChange = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.createTodo({...this.state, id: uuid(), completed: false});\r\n        this.setState({\r\n            task: ''\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            \r\n                <form className=\"NewToDoForm\" onSubmit={this.handleSubmit}>\r\n                    <label htmlFor='task'>New Todo</label>\r\n                    <input \r\n                        type='text' \r\n                        name='task'\r\n                        placeholder='New Todo' \r\n                        id='task' \r\n                        value={this.state.task}\r\n                        onChange={this.handleChange}\r\n                    >\r\n                    </input>\r\n                    <button>Add Todo</button>\r\n                </form>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default NewToDo;\r\n","import React, { Component } from 'react';\r\nimport Todo from './Todo';\r\nimport NewToDo from './NewToDo';\r\nimport './TodoList.css';\r\n\r\nexport class TodoList extends Component {\r\n\r\n    state = {\r\n        todos: []\r\n    };\r\n\r\n    createTodoHandler = newTodo => {\r\n        this.setState({\r\n            todos: [...this.state.todos, newTodo]\r\n        });\r\n    }\r\n\r\n    removeTodoHandler = id => {\r\n        this.setState({\r\n            todos: this.state.todos.filter(todo => todo.id !== id)\r\n        });\r\n    }\r\n\r\n    updateTodo = (id, updatedTodo) => {\r\n        const updatedItem = this.state.todos.map(todo => {\r\n            if(todo.id === id) {\r\n                return { ...todo, task: updatedTodo };\r\n            }\r\n            return todo;\r\n        });\r\n        this.setState({\r\n            todos: updatedItem\r\n        });\r\n    }\r\n\r\n    toggleCompletion = (id) => {\r\n        const updatedItem = this.state.todos.map(todo => {\r\n            if(todo.id === id) {\r\n                return { ...todo, completed: !todo.completed };\r\n            }\r\n            return todo;\r\n        });\r\n        this.setState({\r\n            todos: updatedItem\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        let items = this.state.todos.map(todo => \r\n        <Todo \r\n            key={todo.id} \r\n            id={todo.id} \r\n            task={todo.task}\r\n            completed={todo.completed} \r\n            deleteTodo={this.removeTodoHandler}\r\n            updateTodo={this.updateTodo}\r\n            toggleTodo={this.toggleCompletion}\r\n            />)\r\n        return (\r\n            <div className=\"TodoList\">\r\n                <h1>Todo List <span>Built With React</span></h1>\r\n                \r\n                <ul>\r\n                    {items}\r\n                </ul>\r\n\r\n                <NewToDo createTodo={this.createTodoHandler}/>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\nimport TodoList from './components/TodoList';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}